package com.sonsofcrypto.web3lib.provider

import com.sonsofcrypto.web3lib.assertBool
import com.sonsofcrypto.web3lib.formatters.Formater
import com.sonsofcrypto.web3lib.provider.model.Block
import com.sonsofcrypto.web3lib.provider.model.BlockTag
import com.sonsofcrypto.web3lib.provider.model.DataHexStr
import com.sonsofcrypto.web3lib.provider.model.FilterRequest
import com.sonsofcrypto.web3lib.provider.model.JsonRpcErrorResponse
import com.sonsofcrypto.web3lib.provider.model.Log
import com.sonsofcrypto.web3lib.provider.model.QntHexStr
import com.sonsofcrypto.web3lib.provider.model.Topic
import com.sonsofcrypto.web3lib.provider.model.Transaction
import com.sonsofcrypto.web3lib.provider.model.TransactionReceipt
import com.sonsofcrypto.web3lib.provider.model.TransactionRequest
import com.sonsofcrypto.web3lib.provider.model.fromHexifiedJsonObject
import com.sonsofcrypto.web3lib.provider.model.toBigIntData
import com.sonsofcrypto.web3lib.provider.model.toIntQnt
import com.sonsofcrypto.web3lib.provider.model.toLongQnt
import com.sonsofcrypto.web3lib.provider.model.toUIntQnt
import com.sonsofcrypto.web3lib.provider.model.toULongQnt
import com.sonsofcrypto.web3lib.testKeySigner
import com.sonsofcrypto.web3lib.types.Address
import com.sonsofcrypto.web3lib.types.Network
import com.sonsofcrypto.web3lib.types.bignum.BigDec
import com.sonsofcrypto.web3lib.types.bignum.BigInt
import com.sonsofcrypto.web3lib.legacy.abiEncode
import com.sonsofcrypto.web3lib.extensions.jsonDecode
import com.sonsofcrypto.web3lib.utilsCrypto.keccak256
import io.ktor.utils.io.core.toByteArray
import kotlinx.coroutines.delay
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.json.JsonArray
import kotlinx.serialization.json.JsonObject
import kotlin.test.Test
import kotlin.test.assertTrue
import kotlin.time.Duration.Companion.seconds

class ProviderTest {

    @Test
    fun testBlockNumber() = runBlocking {
        val blockNumber = ProviderPocket(Network.ethereum()).blockNumber()
        assertTrue(
            blockNumber.isGreaterThan(BigInt.from(17331340)),
            "Expected greater block number $blockNumber"
        )
    }

    @Test
    fun testGasPrice() = runBlocking {
        val gasPrice = ProviderPocket(Network.ethereum()).gasPrice()
        assertTrue(
            gasPrice.isGreaterThan(BigInt.from(635539324)),
            "Gas appears to be too cheap ${gasPrice.toString()}"
        )
    }

    @Test
    fun sendRawTransaction() = runBlocking {
        val provider = ProviderPocket(Network.goerli())
        val signer = testKeySigner().connect(provider)
        val to = Address.HexStr("0x3E7Ef1fF9226E04245b3002dB5e037c7fB7128c5")
        val amount = Formater.formatTo(BigDec.from("0.00001"), 18)
        val ogToBalance = provider.getBalance(to)
        val tx = TransactionRequest(to = to, value = amount)
        signer.sendTransaction(tx)
        delay(48.seconds)
        val toBalance = provider.getBalance(to)
        assertBool(
            ogToBalance.add(amount) == toBalance,
            "sendRawTransaction failed ${ogToBalance.toDecimalString()}" +
            " ${toBalance.toDecimalString()}"
        )
    }

    @Test
    fun testGetBalance() = runBlocking {
        val balance = ProviderPocket(Network.ethereum()).getBalance(
            Address.HexStr("0x9fFd5aEFd25E18bb8AaA171b8eC619d94AD6AAf0")
        )
        assertTrue(balance.isGreaterThan(BigInt.zero), "Zero balance")
    }

    @Test
    fun testGetStorageAt() = runBlocking {
        val addr = Address.HexStr("0xf79E73dE6934B767De0fAa120d059811A40276d9")
        val storage = ProviderPocket(Network.ethereum())
            .getStorageAt(addr, 0uL)
            .toBigIntData()
        assertBool(
            storage.toDecimalString() == "1101",
            "testGetStorageAt expected: 1101, result: $storage"
        )
    }

    @Test
    fun testGetTransactionCount() = runBlocking {
        val addr = Address.HexStr("0x9fFd5aEFd25E18bb8AaA171b8eC619d94AD6AAf0")
        val txCnt = ProviderPocket(Network.ethereum()).getTransactionCount(addr)
        assertTrue(
            txCnt.isGreaterThan(BigInt.from(13)),
            "testGetTransactionCount expected: > 13, result: $txCnt"
        )
    }

    @Test
    fun testGetCode() = runBlocking {
        val expected = "0x6080604052600436106102515760003560e01c806370a0823111610139578063b071401b116100b6578063d5abeb011161007a578063d5abeb011461069d578063db4bec44146106b3578063e0a80853146106e3578063e985e9c514610703578063efbd73f41461074c578063f2fde38b1461076c57600080fd5b8063b071401b1461060a578063b767a0981461062a578063b88d4fde1461064a578063c87b56dd1461066a578063d2cab0561461068a57600080fd5b806394354fd0116100fd57806394354fd01461059757806395d89b41146105ad578063a0712d68146105c2578063a22cb465146105d5578063a45ba8e7146105f557600080fd5b806370a0823114610504578063715018a6146105245780637cb64759146105395780637ec4a659146105595780638da5cb5b1461057957600080fd5b80633ccfd60b116101d2578063518302271161019657806351830227146104615780635503a0e8146104815780635c975abb1461049657806362b99ad4146104b05780636352211e146104c55780636caede3d146104e557600080fd5b80633ccfd60b146103bf57806342842e0e146103d4578063438b6300146103f457806344a0d68a146104215780634fdd43cb1461044157600080fd5b806316ba10e01161021957806316ba10e01461032b57806316c38b3c1461034b57806318160ddd1461036b57806323b872dd146103895780632eb4a7ab146103a957600080fd5b806301ffc9a71461025657806306fdde031461028b578063081812fc146102ad578063095ea7b3146102e557806313faede614610307575b600080fd5b34801561026257600080fd5b50610276610271366004611f4c565b61078c565b60405190151581526020015b60405180910390f35b34801561029757600080fd5b506102a06107de565b6040516102829190611fc1565b3480156102b957600080fd5b506102cd6102c8366004611fd4565b610870565b6040516001600160a01b039091168152602001610282565b3480156102f157600080fd5b50610305610300366004612009565b6108b4565b005b34801561031357600080fd5b5061031d600f5481565b604051908152602001610282565b34801561033757600080fd5b506103056103463660046120be565b610942565b34801561035757600080fd5b50610305610366366004612116565b61098c565b34801561037757600080fd5b5061031d600154600054036000190190565b34801561039557600080fd5b506103056103a4366004612131565b6109c9565b3480156103b557600080fd5b5061031d600a5481565b3480156103cb57600080fd5b506103056109d4565b3480156103e057600080fd5b506103056103ef366004612131565b610acf565b34801561040057600080fd5b5061041461040f36600461216d565b610aea565b6040516102829190612188565b34801561042d57600080fd5b5061030561043c366004611fd4565b610c2a565b34801561044d57600080fd5b5061030561045c3660046120be565b610c59565b34801561046d57600080fd5b506012546102769062010000900460ff1681565b34801561048d57600080fd5b506102a0610c96565b3480156104a257600080fd5b506012546102769060ff1681565b3480156104bc57600080fd5b506102a0610d24565b3480156104d157600080fd5b506102cd6104e0366004611fd4565b610d31565b3480156104f157600080fd5b5060125461027690610100900460ff1681565b34801561051057600080fd5b5061031d61051f36600461216d565b610d43565b34801561053057600080fd5b50610305610d91565b34801561054557600080fd5b50610305610554366004611fd4565b610dc7565b34801561056557600080fd5b506103056105743660046120be565b610df6565b34801561058557600080fd5b506008546001600160a01b03166102cd565b3480156105a357600080fd5b5061031d60115481565b3480156105b957600080fd5b506102a0610e33565b6103056105d0366004611fd4565b610e42565b3480156105e157600080fd5b506103056105f03660046121cc565b610f5f565b34801561060157600080fd5b506102a0610ff5565b34801561061657600080fd5b50610305610625366004611fd4565b611002565b34801561063657600080fd5b50610305610645366004612116565b611031565b34801561065657600080fd5b506103056106653660046121ff565b611075565b34801561067657600080fd5b506102a0610685366004611fd4565b6110c6565b61030561069836600461227a565b611236565b3480156106a957600080fd5b5061031d60105481565b3480156106bf57600080fd5b506102766106ce36600461216d565b600b6020526000908152604090205460ff1681565b3480156106ef57600080fd5b506103056106fe366004612116565b61149b565b34801561070f57600080fd5b5061027661071e3660046122f8565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561075857600080fd5b50610305610767366004612322565b6114e1565b34801561077857600080fd5b5061030561078736600461216d565b611581565b60006001600160e01b031982166380ac58cd60e01b14806107bd57506001600160e01b03198216635b5e139f60e01b145b806107d857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600280546107ed90612345565b80601f016020809104026020016040519081016040528092919081815260200182805461081990612345565b80156108665780601f1061083b57610100808354040283529160200191610866565b820191906000526020600020905b81548152906001019060200180831161084957829003601f168201915b5050505050905090565b600061087b8261161c565b610898576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006108bf82610d31565b9050806001600160a01b0316836001600160a01b031614156108f45760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216148015906109145750610912813361071e565b155b15610932576040516367d9dca160e11b815260040160405180910390fd5b61093d838383611655565b505050565b6008546001600160a01b031633146109755760405162461bcd60e51b815260040161096c90612380565b60405180910390fd5b805161098890600d906020840190611e9d565b5050565b6008546001600160a01b031633146109b65760405162461bcd60e51b815260040161096c90612380565b6012805460ff1916911515919091179055565b61093d8383836116b1565b6008546001600160a01b031633146109fe5760405162461bcd60e51b815260040161096c90612380565b60026009541415610a515760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161096c565b60026009556000610a6a6008546001600160a01b031690565b6001600160a01b03164760405160006040518083038185875af1925050503d8060008114610ab4576040519150601f19603f3d011682016040523d82523d6000602084013e610ab9565b606091505b5050905080610ac757600080fd5b506001600955565b61093d83838360405180602001604052806000815250611075565b60606000610af783610d43565b90506000816001600160401b03811115610b1357610b13612033565b604051908082528060200260200182016040528015610b3c578160200160208202803683370190505b50905060016000805b8482108015610b55575060005483105b15610c1f57600083815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff16151591810182905290610c0c5780516001600160a01b031615610bc657805191505b876001600160a01b0316826001600160a01b03161415610c0c5783858481518110610bf357610bf36123b5565b602090810291909101015282610c08816123e1565b9350505b83610c16816123e1565b94505050610b45565b509195945050505050565b6008546001600160a01b03163314610c545760405162461bcd60e51b815260040161096c90612380565b600f55565b6008546001600160a01b03163314610c835760405162461bcd60e51b815260040161096c90612380565b805161098890600e906020840190611e9d565b600d8054610ca390612345565b80601f0160208091040260200160405190810160405280929190818152602001828054610ccf90612345565b8015610d1c5780601f10610cf157610100808354040283529160200191610d1c565b820191906000526020600020905b815481529060010190602001808311610cff57829003601f168201915b505050505081565b600c8054610ca390612345565b6000610d3c8261189f565b5192915050565b60006001600160a01b038216610d6c576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6008546001600160a01b03163314610dbb5760405162461bcd60e51b815260040161096c90612380565b610dc560006119c6565b565b6008546001600160a01b03163314610df15760405162461bcd60e51b815260040161096c90612380565b600a55565b6008546001600160a01b03163314610e205760405162461bcd60e51b815260040161096c90612380565b805161098890600c906020840190611e9d565b6060600380546107ed90612345565b80600081118015610e5557506011548111155b610e715760405162461bcd60e51b815260040161096c906123fc565b60105481610e86600154600054036000190190565b610e90919061242a565b1115610eae5760405162461bcd60e51b815260040161096c90612442565b8180600f54610ebd9190612470565b341015610f025760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742066756e64732160681b604482015260640161096c565b60125460ff1615610f555760405162461bcd60e51b815260206004820152601760248201527f54686520636f6e74726163742069732070617573656421000000000000000000604482015260640161096c565b61093d3384611a18565b6001600160a01b038216331415610f895760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600e8054610ca390612345565b6008546001600160a01b0316331461102c5760405162461bcd60e51b815260040161096c90612380565b601155565b6008546001600160a01b0316331461105b5760405162461bcd60e51b815260040161096c90612380565b601280549115156101000261ff0019909216919091179055565b6110808484846116b1565b6001600160a01b0383163b151580156110a257506110a084848484611a32565b155b156110c0576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60606110d18261161c565b6111355760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161096c565b60125462010000900460ff166111d757600e805461115290612345565b80601f016020809104026020016040519081016040528092919081815260200182805461117e90612345565b80156111cb5780601f106111a0576101008083540402835291602001916111cb565b820191906000526020600020905b8154815290600101906020018083116111ae57829003601f168201915b50505050509050919050565b60006111e1611b2a565b90506000815111611201576040518060200160405280600081525061122f565b8061120b84611b39565b600d60405160200161121f9392919061248f565b6040516020818303038152906040525b9392505050565b8260008111801561124957506011548111155b6112655760405162461bcd60e51b815260040161096c906123fc565b6010548161127a600154600054036000190190565b611284919061242a565b11156112a25760405162461bcd60e51b815260040161096c90612442565b8380600f546112b19190612470565b3410156112f65760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742066756e64732160681b604482015260640161096c565b601254610100900460ff166113585760405162461bcd60e51b815260206004820152602260248201527f5468652077686974656c6973742073616c65206973206e6f7420656e61626c65604482015261642160f01b606482015260840161096c565b336000908152600b602052604090205460ff16156113b85760405162461bcd60e51b815260206004820152601860248201527f4164647265737320616c726561647920636c61696d6564210000000000000000604482015260640161096c565b6040516bffffffffffffffffffffffff193360601b16602082015260009060340160405160208183030381529060405280519060200120905061143285858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600a549150849050611c36565b61146f5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c69642070726f6f662160901b604482015260640161096c565b336000818152600b60205260409020805460ff191660011790556114939087611a18565b505050505050565b6008546001600160a01b031633146114c55760405162461bcd60e51b815260040161096c90612380565b60128054911515620100000262ff000019909216919091179055565b816000811180156114f457506011548111155b6115105760405162461bcd60e51b815260040161096c906123fc565b60105481611525600154600054036000190190565b61152f919061242a565b111561154d5760405162461bcd60e51b815260040161096c90612442565b6008546001600160a01b031633146115775760405162461bcd60e51b815260040161096c90612380565b61093d8284611a18565b6008546001600160a01b031633146115ab5760405162461bcd60e51b815260040161096c90612380565b6001600160a01b0381166116105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161096c565b611619816119c6565b50565b600081600111158015611630575060005482105b80156107d8575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006116bc8261189f565b9050836001600160a01b031681600001516001600160a01b0316146116f35760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806117115750611711853361071e565b8061172c57503361172184610870565b6001600160a01b0316145b90508061174c57604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661177357604051633a954ecd60e21b815260040160405180910390fd5b61177f60008487611655565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b4290921691909102178355870180845292208054919390911661185357600054821461185357805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b604080516060810182526000808252602082018190529181019190915281806001111580156118cf575060005481105b156119ad57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906119ab5780516001600160a01b031615611942579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff16151592810192909252156119a6579392505050565b611942565b505b604051636f96cda160e11b815260040160405180910390fd5b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610988828260405180602001604052806000815250611c4c565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611a67903390899088908890600401612553565b602060405180830381600087803b158015611a8157600080fd5b505af1925050508015611ab1575060408051601f3d908101601f19168201909252611aae91810190612590565b60015b611b0c573d808015611adf576040519150601f19603f3d011682016040523d82523d6000602084013e611ae4565b606091505b508051611b04576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b6060600c80546107ed90612345565b606081611b5d5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611b875780611b71816123e1565b9150611b809050600a836125c3565b9150611b61565b6000816001600160401b03811115611ba157611ba1612033565b6040519080825280601f01601f191660200182016040528015611bcb576020820181803683370190505b5090505b8415611b2257611be06001836125d7565b9150611bed600a866125ee565b611bf890603061242a565b60f81b818381518110611c0d57611c0d6123b5565b60200101906001600160f81b031916908160001a905350611c2f600a866125c3565b9450611bcf565b600082611c438584611c59565b14949350505050565b61093d8383836001611ccd565b600081815b8451811015611cc5576000858281518110611c7b57611c7b6123b5565b60200260200101519050808311611ca15760008381526020829052604090209250611cb2565b600081815260208490526040902092505b5080611cbd816123e1565b915050611c5e565b509392505050565b6000546001600160a01b038516611cf657604051622e076360e81b815260040160405180910390fd5b83611d145760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546fffffffffffffffffffffffffffffffff1981166001600160401b038083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c01811690920217909155858452600490925290912080546001600160e01b031916909217600160a01b429092169190910217905580808501838015611dc557506001600160a01b0387163b15155b15611e4e575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4611e166000888480600101955088611a32565b611e33576040516368d2bf6b60e11b815260040160405180910390fd5b80821415611dcb578260005414611e4957600080fd5b611e94565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480821415611e4f575b50600055611898565b828054611ea990612345565b90600052602060002090601f016020900481019282611ecb5760008555611f11565b82601f10611ee457805160ff1916838001178555611f11565b82800160010185558215611f11579182015b82811115611f11578251825591602001919060010190611ef6565b50611f1d929150611f21565b5090565b5b80821115611f1d5760008155600101611f22565b6001600160e01b03198116811461161957600080fd5b600060208284031215611f5e57600080fd5b813561122f81611f36565b60005b83811015611f84578181015183820152602001611f6c565b838111156110c05750506000910152565b60008151808452611fad816020860160208601611f69565b601f01601f19169290920160200192915050565b60208152600061122f6020830184611f95565b600060208284031215611fe657600080fd5b5035919050565b80356001600160a01b038116811461200457600080fd5b919050565b6000806040838503121561201c57600080fd5b61202583611fed565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561206357612063612033565b604051601f8501601f19908116603f0116810190828211818310171561208b5761208b612033565b816040528093508581528686860111156120a457600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156120d057600080fd5b81356001600160401b038111156120e657600080fd5b8201601f810184136120f757600080fd5b611b2284823560208401612049565b8035801515811461200457600080fd5b60006020828403121561212857600080fd5b61122f82612106565b60008060006060848603121561214657600080fd5b61214f84611fed565b925061215d60208501611fed565b9150604084013590509250925092565b60006020828403121561217f57600080fd5b61122f82611fed565b6020808252825182820181905260009190848201906040850190845b818110156121c0578351835292840192918401916001016121a4565b50909695505050505050565b600080604083850312156121df57600080fd5b6121e883611fed565b91506121f660208401612106565b90509250929050565b6000806000806080858703121561221557600080fd5b61221e85611fed565b935061222c60208601611fed565b92506040850135915060608501356001600160401b0381111561224e57600080fd5b8501601f8101871361225f57600080fd5b61226e87823560208401612049565b91505092959194509250565b60008060006040848603121561228f57600080fd5b8335925060208401356001600160401b03808211156122ad57600080fd5b818601915086601f8301126122c157600080fd5b8135818111156122d057600080fd5b8760208260051b85010111156122e557600080fd5b6020830194508093505050509250925092565b6000806040838503121561230b57600080fd5b61231483611fed565b91506121f660208401611fed565b6000806040838503121561233557600080fd5b823591506121f660208401611fed565b600181811c9082168061235957607f821691505b6020821081141561237a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156123f5576123f56123cb565b5060010190565b602080825260149082015273496e76616c6964206d696e7420616d6f756e742160601b604082015260600190565b6000821982111561243d5761243d6123cb565b500190565b6020808252601490820152734d617820737570706c792065786365656465642160601b604082015260600190565b600081600019048311821515161561248a5761248a6123cb565b500290565b6000845160206124a28285838a01611f69565b8551918401916124b58184848a01611f69565b8554920191600090600181811c90808316806124d257607f831692505b8583108114156124f057634e487b7160e01b85526022600452602485fd5b808015612504576001811461251557612542565b60ff19851688528388019550612542565b60008b81526020902060005b8581101561253a5781548a820152908401908801612521565b505083880195505b50939b9a5050505050505050505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061258690830184611f95565b9695505050505050565b6000602082840312156125a257600080fd5b815161122f81611f36565b634e487b7160e01b600052601260045260246000fd5b6000826125d2576125d26125ad565b500490565b6000828210156125e9576125e96123cb565b500390565b6000826125fd576125fd6125ad565b50069056fea2646970667358221220509e5f657c0cdb2fcc75f8d8ccbadf56fdf10d21b37224751bdac12943d6f89b64736f6c63430008090033"
        val addr = Address.HexStr("0xf79E73dE6934B767De0fAa120d059811A40276d9")
        val code = ProviderPocket(Network.ethereum()).getCode(addr)
        assertBool(expected == code, "testGetCode code")
    }

    @Test
    fun testCall() = runBlocking {
        val expected = "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000e7765623377616c6c6574204e4654000000000000000000000000000000000000"
        val addr = Address.HexStr("0xf79E73dE6934B767De0fAa120d059811A40276d9")
        val tx = TransactionRequest(to = addr, data = "0x06fdde03")
        val provider = ProviderPocket(Network.ethereum())
        provider.debugLogs = true
        val result = provider.call(tx)
        assertBool(result == expected, "testCall\n$expected\n$result")
    }

    @Test
    fun testEstimateGas() = runBlocking {
        val addr = Address.HexStr("0xf79E73dE6934B767De0fAa120d059811A40276d9")
        val tx = TransactionRequest(to = addr, data = "0xd5abeb01",)
        val res = ProviderPocket(Network.ethereum()).estimateGas(tx)
        assertBool(
            res.toDecimalString() == "23403",
            "testEstimateGas expected: 23403, result: ${res.toDecimalString()}"
        )
    }

    @Test
    fun testGetBlockTransactionHashCount() = runBlocking {
        val txCnt = ProviderPocket(Network.ethereum()).getBlockTransactionCount(
            BlockTag.Hash("0x4848a3b125c6ae2d2bdfc1537eebe09fe115fe8feac552bbc1f2d4b8ba1d61c6")
        )
        assertTrue(txCnt == 358uL, "testGetBlockTransactionHashCount $txCnt")
    }

    @Test
    fun testGetBlockTransactionNumberCount() = runBlocking {
        val txCnt = ProviderPocket(Network.ethereum())
            .getBlockTransactionCount(BlockTag.Number(15185387))
        assertTrue(txCnt == 358uL, "testGetBlockTransactionNumberCount $txCnt")
    }

    @Test
    fun testGetUncleCount() = runBlocking {
        val provider = ProviderPocket(Network.ethereum())
        val resultByHash = provider.getUncleCount(BlockTag.Hash("0x78d47648352914d688272ef743a493f1952b10b12831704764a3c6a3119371cc"))
        assertTrue(resultByHash == 1uL, "Unexpected getUncleCountByHash")

        val resultByNumber = provider.getUncleCount(BlockTag.Number(15186562))
        assertTrue(resultByHash == 1uL, "Unexpected getUncleCountByNumber")
    }

    @Test
    fun testGetBlock() = runBlocking {
        val expectedJson = """{"baseFeePerGas":"0x35e07efbf","difficulty":"0x2985970dda4147","extraData":"0x75732d77657374312d38","gasLimit":"0x1ca35ef","gasUsed":"0x52db4b","hash":"0xb6e1f102c04bc9343afd7be8703b243066ed342316966dcf72fc65f98072becf","logsBloom":"0xd220422241020002116000008801443000108003440982100011c0002c00110080200101000105d500403f8b485111010e0300090ac0b8008081561412a4228100001d221808048c2822040944a44de04200a750d2509046182a8e9282213a4303820408ca4b10020004200803800829002010a0150854011600081678d8000186a801010c8273600448014019420515012002d1a12c032900308969005438048a58114504826012020210c0a9020405082240112180b0020d21800624080260099b22822088205412046008008a3600002004c6530e1430140079228842a4284078200804480720845450800805ae0400c000100dc90b40008508c0400c3401","miner":"0xea674fdde714fd979de3edf0f56aa9716b898ec8","mixHash":"0xf5bdf20daba40ec4976272dc9ce7d7bcc4495c07ac56b76f2df18e54178b20c1","nonce":"0x2bb752a590246182","number":"0xe7be6a","parentHash":"0x8898083e9d18e94fbb5c70d0b7e180cc108692c779d6a3c4e470c27b3c02d26a","receiptsRoot":"0x706a16d64af304cf689e961fb6d31b17c58796484ed95b61e1ad20dd029596a6","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","size":"0x7057","stateRoot":"0xb9a7b7b810edbab80d3a9da412a1e5a3547373d8f5dd73af25207e608c6768f4","timestamp":"0x62d99b53","totalDifficulty":"0xb8c1919913e75b32560","transactions":["0xce611f3bfcdd2973b1e8a0958b6f65c6aad7fefdb9c82293b2eaf7b86913aad4","0x1c1b7679d9d96857015e4cd5eba21e23731c4a473d35d698331550e2fa817c2b","0x2267bcee5ac08f3603faadc2645b3cd735d57767e5adec7ae86fc8cc25129640","0xd0bed9eefc1386c89b71c3901c3cd85ce91cef1132acb81cd1b13ed842a07803","0x0b11f81cb09d78ce15ac4b0a5b6a7f5ae5c2e6c3a2c46b28adaad347a92c754d","0x8ca345bfb05d0abfb49c47c3dbe21c238ad2d4bd73d1159dd2089fe952be9dc0","0x723c11a9ea5cd78e85965b02faa52ed13bfa487c6e1cfc46dc7f65a4aac571b8","0x26a742841d97da0370e65d60f22f8624078374b5b661d181d313748d1ae683dc","0x4baacf14c95f33a95fbe3e92f83bec340e69e1fd04b2ca3c80db962a8f2d5bc7","0x9f6052f2362b712c42c7bd612286d88a199168db904256468d6f3d355a3a74d3","0x491bc87b6fb4231650524f1e7dce5a92386d3ad6ed57f1ebf34abc2217191363","0xc769d86954394946056642a80d0e971c2a4cc3d79ae495277dec0bc31ddcf6c4","0xc1cd324d59dbfffa43fe5fbcd101a082b52441f852a301dc9a55de1a61a41a0f","0x6aae31ed6b748ba8d8affaec596faf86a910a64d0297d77bd8bb98c45213c184","0x4beb5d1b97f2c594c14bcfd742225206950761f8650446a359b8d01f89242d1c","0xd562a8c38f064bdaa64125f37109a00340699aa27b5eb01d5387da4000618219","0x33ccb1a7a09af79a8077240017b0147cddca965d51f091b3ab1ddd1ab2dbdd85","0x1dcee4ce9445a100155995862de1813f784e02bc63127997437cce4f62055357","0x306d5d0e256b92688c6175fd101651af3ca51a17d7a35d895220a3ba956afac6","0x1e19b431183d190e6762a21bcb6d4072d1bb8f8628210f59d575b17857e76714","0x1d673515c6ae61dc8602cd6dd0584bcb4da66ab20cea2ad9a0964c28d601c58a","0x6f8a2facf849e57394643f89440878c27c8088551bf34dcb0a26841837691638","0x37e2d9d18597010c0962828b3ba14ed30f6743ebd60a428adae7fc7bc1ca80d6","0xf68045d38b99ee78b11091b815477039d4f23e03468c0490f32e0876776a6919","0x93dd4a90008483bb9f2d982353ff90a9cdc7190017eee06394af51c291d6c5c0","0x547be7438e22b19003ddf8000ea3d0222ea249aa4a2aec3239709397cb20ac43","0xc9c30767425645c7e6e5f0c5f2898360b9682dc1f2784622f90c927fa4d65689","0x8fee07dcc102e0f9efb7348ac1da0f20a8e54167545e9c8d2807c61ea36cd70c","0xdb40821a74334a81301ce41035b25c5031caa658209d252bc12900ffcbb0bbab","0xf167396d730ded93e4df2e51c9b2a9f91a37c03b32ca7626a671b4f471b3bdcc","0xf17fe4e76e4fd36128125a4ea8d9920d29b5a6b197386c34962f929b40b9c28a","0xc3642d91ff1a9d90ffb1853788d5c431fe7780d56ddc7b4cd8e0bcd592a71276","0x3aa22a82786ca37e28212e88da61d0e96de130289abe8543b06f1e39c792122e","0xab95bd1ac9ac4e0e8781bf1ddc244696313c353453206ff313cc195bc75fb9b0","0x8bd86295d04e7e8874f04d2a856a478174d7b2697540978d69dd50bd5badc1a6","0x3f74c155e2a8314a14201cc6cd88501e6c8d57495e5b679c89db14a301e6dc60","0x72a2e655657745e57fe7c8fb54bd8501b9f470857577b347d0ce6ac8dadad8cd","0xdaf3edb58fa0c9825857e46c3d990e6ab209fa044735bd519eaea56d5f3ac1ba","0xfe44a5a90e0124019317fd3bda0ebba1f4aef4b45e07c39e3e76354c6f259c0e","0x8f07fa29fe5648d2e0a4893887e210dbfb57b85d08ce89aa2f1fd516561694ef","0x59b2d92abc1259838a8c07937f04e0b6d6802de73a733aeb5e1b178d162f2946","0x04fc8f239d4d53aa8c3fbde18bc8ce56766bfa7c614764ba5bc28ddf2315e44a","0x994d4763ec17b8840483b50a240e4f1aef03a23453fd31caea9fe858d8ebf2b8","0xc45baa62796bcf37bc56845c8bbbd60d403436ceeb14690dd41473e4c546ba8d","0xc1cd9b4cc6aab6e87a0fb18d87efbaee7bde9f5b357975ffafb021b8f4bfc5ec","0x1196be7bd34fd83462648585eaebe40166bccc9f50a67e9fffec363a727ac0b9","0x16cc5dca24a63f6d04a8ad7231c76b0d65118ff921b3bd325328ae832523bd2f","0x170810fe9af1e285e47cd924d65cbe5811d88fdc3b2348901c97dabdb4c3223c","0xc5e914201de419d52425a43583074f3f4f3ae8151963e3f6f5f8d272e1a82a66","0xc5175fb3334557293d3c81cbdc3eb3139d7e0776be28a725156e3862d970e588","0xb092ef3e934283a61a294c02431436714fcf99ccf5e1a1204b4774801ad00a69","0xdb150ce4476d10953de20e7ad151f38d406ecd76b0b75dedb12065f327547930","0xb789ce6e59a29dc926b8a74db7f923829c10cedc4a5f9a74a2911e5419392258","0x4b73ee3f97cbce6ec0892f026001b87577ce3c938987a4eabb7fa36b9c4d03cf","0x3169090d3dc829166dd0d62619e68f1216a3f5852b6439d35c7504622a8439b3","0x61d577d51567c4c46c2cf0ab391938218399ecc8ee8601d472b45694ce94b373","0x4e5189ec467bd2387202d429a3558545deda0d5f7407dab5113548ae13ff5c97","0xa0776d599ca159636802b805f5aaaa1d274b876d460ac51135681d97f780311d","0x81d0e9af665335c637a82fa865aeba55be52b084bd9a37c18bb1b61a043e1c38","0x8261c7567ce6e108bf31a950a87b57e69055a1ad4eaf8f6229025a6897d81ba0","0x6638b9d440c1685149e5ff500c609a0feea9f580694b05dacab192f3ed3e544c"],"transactionsRoot":"0x2f5448c5fa91dfd779b80770b6744c12e247cc816f9c7a430ae0a69e2d2a3582","uncles":[]}"""
        val expectedJsonObject = jsonDecode<JsonObject>(expectedJson)
        val expected = Block.fromHexifiedJsonObject(expectedJsonObject!!)
        val result = ProviderPocket(Network.ethereum())
            .getBlock(BlockTag.Hash("0xb6e1f102c04bc9343afd7be8703b243066ed342316966dcf72fc65f98072becf"))
        assertBool(result == expected, "testGetBlock \n$expected\n$result")
    }

    @Test
    fun testGetTransaction() = runBlocking {
        val txHashes = listOf(
            "0x3f74c155e2a8314a14201cc6cd88501e6c8d57495e5b679c89db14a301e6dc60",
            "0xc703ec0e22b6ede8846d76d0bf500a806ade95ba74e09d714e3688a86c3b15c0"
        )
        val expectedJsons = listOf(
            """{"accessList":[],"blockHash":"0xb6e1f102c04bc9343afd7be8703b243066ed342316966dcf72fc65f98072becf","blockNumber":"0xe7be6a","chainId":"0x1","from":"0xe2e22567f90af98798218dc2388f297f9279037a","gas":"0x5208","gasPrice":"0x3b7701ebf","hash":"0x3f74c155e2a8314a14201cc6cd88501e6c8d57495e5b679c89db14a301e6dc60","input":"0x","maxFeePerGas":"0x47c65f56a","maxPriorityFeePerGas":"0x59682f00","nonce":"0x1ed","r":"0x485cf4dff3fcb76a60be1028124a47444ef94c50afc6cd9244220ac953eb9d42","s":"0x31b1c826d138301ad2533cf2037142c3eec85a93ce39fc8f883d981f224d272e","to":"0x4f81a24ceda0753adafb58c6aa7c227fa06c2507","transactionIndex":"0x23","type":"0x2","v":"0x1","value":"0x732652b4ea6833"}""",
            """{"accessList":[{"address":"0xb8ffc3cd6e7cf5a098a1c92f48009765b24088dc","storageKeys":["0x98927f528d79864b2e32d36876faab88709db77eabda16542de3352ea010159c","0x8e2ed18767e9c33b25344c240cdf92034fae56be99e2c07f3d9946d949ffede4"]},{"address":"0x2b33cf282f867a7ff693a66e11b0fcc5552e4425","storageKeys":[]},{"address":"0xde3a93028f2283cc28756b3674bd657eafb992f4","storageKeys":[]},{"address":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","storageKeys":["0x3c679e5fc421e825187f885e3dcd7f4493f886ceeb4930450588e35818a32b9c","0xe465fbe6f6b62658828f64327f3731ed18c878041214c5863565668b294f45e5"]},{"address":"0x454f11d58e27858926d7a4ece8bfea2c33e97b13","storageKeys":["0x0000000000000000000000000000000000000000000000000000000000000009","0x000000000000000000000000000000000000000000000000000000000000000a","0x000000000000000000000000000000000000000000000000000000000000000c","0x0000000000000000000000000000000000000000000000000000000000000008","0x0000000000000000000000000000000000000000000000000000000000000006","0x0000000000000000000000000000000000000000000000000000000000000007"]},{"address":"0x5a98fcbea516cf06857215779fd812ca3bef1b32","storageKeys":["0x0000000000000000000000000000000000000000000000000000000000000000","0xf2d16d45ea2dc9157c60503cdbe6a26123912e1a52139ab4faf3d91bf39aebce","0xd9e366ea018425adc0c4808d7b1c423bf367f0372492411735d928d4dabf1b57","0x000000000000000000000000000000000000000000000000000000000000000b","0x5ad683f4e451c7de73d7b600ed479287460316b1d3c31a9632061b24d51a5578","0xbeeb94899a7ffc29ce2be7a9aff5c21d7b3cd52022a75587b6490c6bee27e80a","0xd9e366ea018425adc0c4808d7b1c423bf367f0372492411735d928d4dabf1957","0xd9e366ea018425adc0c4808d7b1c423bf367f0372492411735d928d4dabf1b56","0xbeeb94899a7ffc29ce2be7a9aff5c21d7b3cd52022a75587b6490c6bee27e80b","0x0000000000000000000000000000000000000000000000000000000000000006","0xbeeb94899a7ffc29ce2be7a9aff5c21d7b3cd52022a75587b6490c6bee279017"]},{"address":"0xf73a1260d222f447210581ddf212d915c09a3249","storageKeys":["0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001","0xe465fbe6f6b62658828f64327f3731ed18c878041214c5863565668b294f45e5","0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b","0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b"]}],"blockHash":"0xcadc083149162766ffa7d4087313013aef990057e91bee707919b68d0d3f5cec","blockNumber":"0xe7be7b","chainId":"0x1","from":"0x26ce7c1976c5eec83ea6ac22d83cb341b08850af","gas":"0x1e8481","gasPrice":"0x2f0bc39df","hash":"0xc703ec0e22b6ede8846d76d0bf500a806ade95ba74e09d714e3688a86c3b15c0","input":"0x0000e7be7b454f11d58e27858926d7a4ece8bfea2c33e97b1309234823990000000000000000000000000000000000000000000004dc6716096283f2386e0100","maxFeePerGas":"0x34ed3c11a","maxPriorityFeePerGas":"0x0","nonce":"0x1a1f9","r":"0xa83e9967427e3a64c6c84de99da3c9071f6fa48019c7de9becbe213da145baf8","s":"0x6a9c398da38f67fafb29a08d846a7aca4a8c649cd60be948378c037c3a576785","to":"0x00000000003b3cc22af3ae1eac0440bcee416b40","transactionIndex":"0x0","type":"0x2","v":"0x0","value":"0x0"}"""
        )
        val provider = ProviderPocket(Network.ethereum())
        for (i in 0..<expectedJsons.count()) {
            val txJson = jsonDecode<JsonObject>(expectedJsons[i])
            val expected = Transaction.fromHexifiedJsonObject(txJson!!)
            val tx = provider.getTransaction(txHashes[i])
            assertBool(expected == tx, "testGetTransaction\n$expected\n$tx")
        }
    }

    @Test
    fun testGetTransactionByBlockIndex() = runBlocking {
        val expectedJson = """{"blockHash":"0xb6e1f102c04bc9343afd7be8703b243066ed342316966dcf72fc65f98072becf","blockNumber":"0xe7be6a","from":"0xe2e22567f90af98798218dc2388f297f9279037a","gas":"0x5208","gasPrice":"0x3b7701ebf","maxPriorityFeePerGas":"0x59682f00","maxFeePerGas":"0x47c65f56a","hash":"0x3f74c155e2a8314a14201cc6cd88501e6c8d57495e5b679c89db14a301e6dc60","input":"0x","nonce":"0x1ed","to":"0x4f81a24ceda0753adafb58c6aa7c227fa06c2507","transactionIndex":"0x23","value":"0x732652b4ea6833","type":"0x2","accessList":[],"chainId":"0x1","v":"0x1","r":"0x485cf4dff3fcb76a60be1028124a47444ef94c50afc6cd9244220ac953eb9d42","s":"0x31b1c826d138301ad2533cf2037142c3eec85a93ce39fc8f883d981f224d272e"}"""
        val expectedJsonObject = jsonDecode<JsonObject>(expectedJson)
        val expected = Transaction.fromHexifiedJsonObject(expectedJsonObject!!)
        val result = ProviderPocket(Network.ethereum()).getTransaction(
            BlockTag.Hash("0xb6e1f102c04bc9343afd7be8703b243066ed342316966dcf72fc65f98072becf"),
            BigInt.from(35)
        )
        assertBool(
            result == expected,
            "testGetTransactionByBlockIndex\n${result.hash}\n${expected.hash}"
        )
    }

    @Test
    fun testGetTransactionReceipt() = runBlocking {
        val expectedJson = """{"blockHash":"0xcadc083149162766ffa7d4087313013aef990057e91bee707919b68d0d3f5cec","blockNumber":"0xe7be7b","contractAddress":null,"cumulativeGasUsed":"0x2d082","effectiveGasPrice":"0x2f0bc39df","from":"0x26ce7c1976c5eec83ea6ac22d83cb341b08850af","gasUsed":"0x2d082","logs":[{"address":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","blockHash":"0xcadc083149162766ffa7d4087313013aef990057e91bee707919b68d0d3f5cec","blockNumber":"0xe7be7b","data":"0x0000000000000000000000000000000000000000000000023482399000000000","logIndex":"0x0","removed":false,"topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x00000000000000000000000000000000003b3cc22af3ae1eac0440bcee416b40","0x000000000000000000000000454f11d58e27858926d7a4ece8bfea2c33e97b13"],"transactionHash":"0xc703ec0e22b6ede8846d76d0bf500a806ade95ba74e09d714e3688a86c3b15c0","transactionIndex":"0x0"},{"address":"0x5a98fcbea516cf06857215779fd812ca3bef1b32","blockHash":"0xcadc083149162766ffa7d4087313013aef990057e91bee707919b68d0d3f5cec","blockNumber":"0xe7be7b","data":"0x0000000000000000000000000000000000000000000004dc6716096283f2386e","logIndex":"0x1","removed":false,"topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x000000000000000000000000454f11d58e27858926d7a4ece8bfea2c33e97b13","0x00000000000000000000000000000000003b3cc22af3ae1eac0440bcee416b40"],"transactionHash":"0xc703ec0e22b6ede8846d76d0bf500a806ade95ba74e09d714e3688a86c3b15c0","transactionIndex":"0x0"},{"address":"0x454f11d58e27858926d7a4ece8bfea2c33e97b13","blockHash":"0xcadc083149162766ffa7d4087313013aef990057e91bee707919b68d0d3f5cec","blockNumber":"0xe7be7b","data":"0x00000000000000000000000000000000000000000000065b908fbfa84299fddb000000000000000000000000000000000000000000000005149e8e76220a421d","logIndex":"0x2","removed":false,"topics":["0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1"],"transactionHash":"0xc703ec0e22b6ede8846d76d0bf500a806ade95ba74e09d714e3688a86c3b15c0","transactionIndex":"0x0"},{"address":"0x454f11d58e27858926d7a4ece8bfea2c33e97b13","blockHash":"0xcadc083149162766ffa7d4087313013aef990057e91bee707919b68d0d3f5cec","blockNumber":"0xe7be7b","data":"0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000234823990000000000000000000000000000000000000000000000000000004dc6716096283f2386e0000000000000000000000000000000000000000000000000000000000000000","logIndex":"0x3","removed":false,"topics":["0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822","0x00000000000000000000000000000000003b3cc22af3ae1eac0440bcee416b40","0x00000000000000000000000000000000003b3cc22af3ae1eac0440bcee416b40"],"transactionHash":"0xc703ec0e22b6ede8846d76d0bf500a806ade95ba74e09d714e3688a86c3b15c0","transactionIndex":"0x0"}],"logsBloom":"0xstatus":"0x1","to":"0x00000000003b3cc22af3ae1eac0440bcee416b40","transactionHash":"0xc703ec0e22b6ede8846d76d0bf500a806ade95ba74e09d714e3688a86c3b15c0","transactionIndex":"0x0","type":"0x2"}"""
        val expectedJsonObject = jsonDecode<JsonObject>(expectedJson)
        val expected = TransactionReceipt.fromHexifiedJsonObject(expectedJsonObject!!)
        val result = ProviderPocket(Network.ethereum()).getTransactionReceipt(
            "0xc703ec0e22b6ede8846d76d0bf500a806ade95ba74e09d714e3688a86c3b15c0"
        )
        assertBool(
            expected == result,
            "testGetTransactionReceipt\n$expected\n$result"
        )
    }

    @Test
    fun testGetUncleBlock() = runBlocking {
        val provider = ProviderPocket(Network.ethereum())
        val result = provider.getUncleBlock(
            BlockTag.Hash("0x4fafadf15c7dee7da50b9ff1d2ec4f31de422a196e334c699749839cc7db41a1"),
            BigInt.from(0)
        )
        assertTrue(
            result.hash == "0xdec21564875f2d0232c1a1ddbb09fc5b209b4d5d65626f5763e9a09e0c78eca5",
            "testGetUncleBlock $result"
        )
    }

    @Test
    fun testGetLogs() = runBlocking {
        val expectedJson = """[{"address":"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48","blockHash":"0xb370022f33b200e306f92fcbe8e376d58fc7cf315d4420ebb7beea4972d70e86","blockNumber":"0x108a42f","data":"0x0000000000000000000000000000000000000000000000000000000059b87c56","logIndex":"0x106","removed":false,"topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x000000000000000000000000769380d02ec0f022b610a907abdd090db23c46f3","0x00000000000000000000000069d9934bb65cf7b39c5bac913d12f8d140d9796e"],"transactionHash":"0x0f0fd00eac0cb935f152ebe02547e150399021b75e44104edb27baf07a23ad1e","transactionIndex":"0x91"}]"""
        val expJsonArr = jsonDecode<JsonArray>(expectedJson)
        val expected = Log.fromHexifiedJsonObject(expJsonArr!!) as List<Log>
        val hash = keccak256("Transfer(address,address,uint256)".toByteArray())
        val signature = DataHexStr(hash)
        val erc20 = "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
        val sender = "0x769380d02ec0f022b610a907abdd090db23c46f3"
        val result = ProviderAlchemy(Network.ethereum()).getLogs(
            FilterRequest(
                BlockTag.Number(17343534),
                BlockTag.Number(17343539),
                Address.HexStr(erc20),
                listOf(
                    Topic.TopicValue(signature),
                    Topic.TopicValue(DataHexStr(abiEncode(Address.HexStr(sender)))),
                    Topic.TopicValue(null),
                )
            )
        )
        assertBool(result == expected, "testGetLogs \n$result\n$expected")
    }

    // @Test
    fun testNewFilter() = runBlocking {
//        val provider = ProviderAlchemy(Network.ethereum())
//        provider.debugLogs = true

        // 0x1f75d3e737ccf5f7d268360201fd39a
//        val newBlockFilter = provider.newBlockFilter()
//        println("=== result $newBlockFilter")
//
//        delay(24.seconds)
//
//        // 0x1edb8f4b44166a87f834ab04743f8099
//        val result = provider.newPendingTransactionFilter()
//        println("=== result $result")
//
//        val result = provider.getFilterChanges(newBlockFilter)
//        println("=== result $result")
//
//        val resultUninstal = provider.uninstallFilter("0xd2b1a460defe6f2ca9d4d71b256f4966")
//        println("=== result $resultUninstal")
    }

    @Test
    fun testHandleNullTransactionReceipt() = runBlocking {
        try {
            val r = ProviderPocket(Network.ethereum()).getTransactionReceipt(
                "0x35da27fad7ed4af1dcaf336c2a166d2949d05d15a6d89409a45c05a09064899d"
            )
        } catch (err: Throwable) {
            assertTrue(true, "expected exception")
            return@runBlocking
        }
        assertTrue(false, "Expected to throw with null result")
    }

    @Test
    fun testErrorHandling() {
        val errorString = """{"error":{"code":-32602,"message":"test"},"id":2101504395,"jsonrpc":"2.0"}"""
        val expected = JsonRpcErrorResponse(
            JsonRpcErrorResponse.Error(-32602, "test"),
            2101504395u
        )
        val error = jsonDecode<JsonRpcErrorResponse>(errorString)
        assertBool(error == expected, "Unexpected error $error")
    }

    @Test
    fun testQuantityHexString() {
        val str = "0xe78a3b" as QntHexStr

        assertBool(str.toIntQnt() == 15174203, "QuantityHexString toIntQnt")
        assertBool(str.toUIntQnt() == 15174203u, "QuantityHexString toUIntQnt")
        assertBool(str.toLongQnt() == 15174203L, "QuantityHexString toLongQnt")
        assertBool(str.toULongQnt() == 15174203uL, "QuantityHexString toULongQnt")

        assertBool(QntHexStr(15174203) == "0xe78a3b", "QuantityHexString fromIntQnt")
        assertBool(QntHexStr(15174203u) == "0xe78a3b", "QuantityHexString fromUIntQnt")
        assertBool(QntHexStr(15174203L) == "0xe78a3b", "QuantityHexString fromLongQnt")
        assertBool(QntHexStr(15174203uL) == "0xe78a3b", "QuantityHexString fromULongQnt")

        assertBool(QntHexStr(0uL) == "0x0", "QuantityHexString ${QntHexStr(0uL)}")
        assertBool(QntHexStr(1024uL) == "0x400", "QuantityHexString ${QntHexStr(1024uL)}")
    }
}